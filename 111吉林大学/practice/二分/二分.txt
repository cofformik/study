//大于等于target的第一个位置 ,若不存在大于等于target的，返回n+1 
int binsearch_low(int a[],int n,int target){
	int low=1,high=n;
	while(low<=high){
		int mid=(low+high)>>1;
		if(target<=a[mid]) high=mid-1;
		else low=mid+1;
	}
	return low;
} 

//小于等于target的最后一个位置，若不存在小于等于target的，返回0  
int binsearch_high(int a[],int n,int target) {
	int low=1,high=n;
	while(low<=high){
		int mid=(low+high)>>1;
		if(target<a[mid]) high=mid-1;
		else low=mid+1;
	}
	return high;
}
//当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1;，计算mid时不需要加1。

C++ 代码模板：
int bsearch_1(int l, int r)
{
    while (l < r)
    {
        int mid = l + r >> 1;
        if (check(mid)) r = mid;
        else l = mid + 1;
    }
    return l;
}
///当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid;，此时为了防止死循环，计算mid时需要加1。

C++ 代码模板：
int bsearch_2(int l, int r)
{
    while (l < r)
    {
        int mid = l + r + 1 >> 1;
        if (check(mid)) l = mid;
        else r = mid - 1;
    }
    return l;
}