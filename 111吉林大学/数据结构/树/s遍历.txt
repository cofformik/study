#include <iostream>
//#include <queue>
#include <deque>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

void buildTree(TreeNode*& root) {
    int x;
    cin >> x;
    if (x == 0) {
        root = nullptr;
        return;
    }
    root = new TreeNode(x);
    buildTree(root->left);
    buildTree(root->right);
}
void read(TreeNode* root, int a, int b) {
    if (root == nullptr) {
        cout << " " << endl;
        return;
    }
    deque<TreeNode*> q;
    q.push_back(root);
    bool flag = true; //从左到右遍历
    bool first = false;
    while (!q.empty()) {
        int len = q.size();
        for (int i = 0; i < len; i++) {
            TreeNode* current = flag ? q.back() : q.front();
            if (flag) {
                q.pop_back();
                if (current->right != nullptr) {
                    q.push_front(current->right);
                }
                if (current->left != nullptr) {
                    q.push_front(current->left);
                }
                if (current->val == a) first = true;
                if (first) cout << current->val << " ";
                if (current->val == b) {
                    cout << endl;
                    return;
                }
            }
            else {
                q.pop_front();
                if (current->left != nullptr) {
                    q.push_back(current->left);
                }
                if (current->right != nullptr) {
                    q.push_back(current->right);
                }

                if (current->val == a) {
                    first = true;
                }
                if (first) cout << current->val << " ";
                if (current->val == b) {
                    cout << endl;
                    return;
                }
            }
            }

        flag = !flag;
    }
}

int main() {
    TreeNode* root;
    buildTree(root);
    int a, b;
    cin >> a >> b;
    read(root, a, b);
    return 0;
}
